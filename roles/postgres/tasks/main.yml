---
    - name: Install packages
      ansible.builtin.apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
        state: present

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/etc/postgresql/14/main/pg_hba.conf"
      register: postgres_data

    - name: Initialize PostgreSQL
      ansible.builtin.shell: "pg_ctl initdb -D /var/lib/pgsql/data"
      when: not postgres_data.stat.exists
 
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: true
      become_user: vagrant
      become_method: sudo
      vars:
        ansible_postgresql_login_password: "{{ db_password }}"

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: true
      become_user: vagrant
      become_method: sudo

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: true
      become_user: vagrant
      become_method: sudo

    - name: "Allow md5 connection for the db user"
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        line: "host    all             {{ db_user }}             0.0.0.0/0            md5"
        insertafter: '^# TYPE  DATABASE        USER            ADDRESS                 METHOD'
      become: true
      #become_user: vagrant
      #become_method: sudo
      
    #- name: Drop table test
    #  shell: "sudo -u postgres psql -d mydatabase -c \"DROP TABLE test;\""
 
    #- name: "Load SQL script into a variable"
    #  set_fact:
    #    migration_sql: "{{ lookup('file', 'files/dump.sql') }}"

    #- name: "Execute script from variable"
    #  shell: "sudo -u psql -d {{ db_name }} -c {{ migration_sql }}"
    #  #become_user: vagrant
    #  become: true
    #  register: sql_response_variable

    - name: Execute SQL commands
      shell:
        cmd: psql -U your_postgresql_user -d mydatabase -c "CREATE TABLE IF NOT EXISTS messages (id serial PRIMARY KEY, message varchar(255) NOT NULL, created_at timestamp DEFAULT current_timestamp); TRUNCATE TABLE messages; INSERT INTO messages (message, created_at) VALUES ('Cloud Computing and Virtualization Class', current_timestamp); INSERT INTO messages (message, created_at) VALUES ('Provisioning my_app with Ansible', current_timestamp); INSERT INTO messages (message, created_at) VALUES ('Ansible is fun and we all gonna fail this class! &#129394;', current_timestamp);"
      become: true
      become_user: vagrant
      

    - name: Grant specific privileges on PostgreSQL tables and sequences
      become: true
      postgresql_privs:
        db: "{{ db_name }}"
        role: "{{ db_user }}"
        obj: messages
        priv: SELECT, INSERT, UPDATE, DELETE
        type: TABLE
        state: present

    - name: Grant privileges on all tables and sequences in the public schema
      become: true
      postgresql_privs:
        db: "{{ db_user }}"
        role: "{{ db_user }}"
        priv: ALL
        schema: public
        state: present

    - name: Copy postgres.conf 'files/dump.sql'
      become: true
      copy: 
        src: files/postgresql.conf
        dest: "/etc/postgresql/14/main/"

    - name: Restart PostgreSQL service
      become: true
      service:
        name: postgresql
        state: restarted